3.16

1. DBCP 세팅 (DB와 연결 목적)

context.xml에 문구 확인

web.xml MYDBCP Setting 시작
  <!-- ========= MyDBCP Setting Start  ===========  -->
  <resource-ref>
 	<description>Oracle Datasource example</description>
 	<res-ref-name>jdbc/mymvc_oracle</res-ref-name>
 	<res-type>javax.sql.DataSource</res-type>
 	<res-auth>Container</res-auth>
  </resource-ref>
  <!-- ========= MyDBCP Setting End  ===========  -->

2. Oracle에서 DB 있는데 웹에 없는경우 commit 해봐라
-DB에서 테이블 작성(이미지 테이블)

3. 인터페이스 만들고 메소드 생성
  - 복수개를 담아야 하면 리턴타입은 LIST<DTO(VO)> throws SQLException

4. DAO의 기능을 수행하기 위해 데이터를 전송할 DTO(VO)생성
  - 변수명은 DB 테이블 요소 
  - Getter & Setter 생성

5. 인터페이스 구현하는 DAO 생성(implements)
  - 메소드 재정의
  	private DataSource ds; // // DataSource ds 는 아파치톰캣이 제공하는 DBCP(DB Connection Pool) 이다.
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
  - 기본생성자 생성
  - 자원반납 메소드 생성


================================================


Model		==> 데이터베이스와 관련된 클래스 DAO, VO, DTO
View		==> JSP파일 .jsp
Controller	==> Servlet Java

MVC 패턴

https://www.w3schools.com/howto/howto_css_table_responsive.asp - 반응형 테이블

https://www.w3schools.com/howto/howto_css_pagination.asp - 페이지

https://www.w3schools.com/howto/howto_css_star_rating.asp - 별점 매기기

https://www.w3schools.com/howto/howto_js_trigger_button_enter.asp - 검색


////////////////////////////////////////////////////////////////////////////////////////////


3.17

깃허브 폴더 공유하기 전 src/main/java 폴더에 아무거나 하나 만들고 공유

절대 main 브랜치에서 개발하면 안됨

pull commit push 순서 반드시 지켜라

https://www.toptal.com/developers/gitignore ==> gitignore 환경에 따라 정의해서 출력해주는 유용한 사이트

**** JDBC 순서 ****

Connection conn = null;
		// Connection conn 은 오라클 데이터베이스 서버와 연결을 맺어주는 객체 
		
		PreparedStatement pstmt = null;
		// PreparedStatement pstmt 은 Connection conn(연결할 오라클 서버)에 전송할 SQL문(편지)을 전달할 객체(우편배달부)이다.
		
		Scanner sc = new Scanner(System.in);

        try {
			// >>> 1. 오라클 드라이버 로딩 <<<  //
	        /*
	           === OracleDriver(오라클 드라이버)의 역할 ===
	           1). OracleDriver 를 메모리에 로딩시켜준다.
	           2). OracleDriver 객체를 생성해준다.
	           3). OracleDriver 객체를 DriverManager에 등록시켜준다.
	               --> DriverManager 는 여러 드라이버들을 Vector 에 저장하여 관리해주는 클래스이다.
	        */ 

			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// >>> 2. 어떤 오라클 서버와 연결을 할래? <<< //
			System.out.print("▷ 연결할 오라클 서버의 IP 주소 : ");
			String ip = sc.nextLine();
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@"+ip+":1521:xe", "HR", "cclass");
			
			// === Connection conn 기본값은 auto commit 이다. === //
			// === Connection conn 기본값인 auto commit 을 수동 commit 으로 전환해보겠다. === //
			conn.setAutoCommit(false);
			// true : auto commit 활성화,  false : auto commit 비활성화 == 수동 commit으로 전환 
			
			
			// >>> 3. SQL문(편지) 을 작성한다. <<< //

			String sql = "insert into jdbc_tbl_memo(no, name, msg )"
					+ "values(jdbc_seq_memo.nextval, ?, ?)"; // SQL문 맨 뒤에 ; 을 넣으면 오류!!
			// ? 를 "위치홀더" 라고 부른다. 위치홀더는 ' ' 안쓴다!!!
		
			
			
			// >>> 4. 연결한 오라클서버(conn)에 SQL문(편지)을 전달할 PreparedStatement 객체(우편배달부) 생성하기 <<< //
			pstmt = conn.prepareStatement(sql);

			// >>> 5. PreparedStatement pstmt 객체(우편배달부)는 작성된 SQL문(편지)을 오라클 서버에 보내서 실행이 되도록 해야 한다 <<< //
			int n = pstmt.executeUpdate();
			/*  .executeUpdate(); 은 SQL문이 DML문(insert, update, delete, merge) 이거나 
            						 SQL문이 DDL문(create, drop, alter, truncate) 일 경우에 사용된다. 

			SQL문이 DML문이라면 return 되어지는 값은 적용되어진 행의 개수를 리턴시켜준다.
			예를 들어, insert into ... 하면 1 개행이 입력되므로 리턴값은 1 이 나온다. 
			 update ... 할 경우에 update 할 대상의 행의 개수가 5 이라면 리턴값은 5 가 나온다. 
			 delete ... 할 경우에 delete 되어질 대상의 행의 개수가 3 이라면 리턴값은 3 가 나온다.
			 
			SQL문이 DDL문이라면 return 되어지는 값은 무조건 0 이 리턴된다.       
			
			.executeQuery(); 은 SQL문이 DQL문(select) 일 경우에 사용된다.
			*/
			
			/// >>> 6. 사용하였던 자원을 반납하기 <<< //
			// 반납의 순서는 생성순서의 역순으로 한다.




////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////

package member.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import common.controller.AbstractController;
import member.model.*;


public class MemberListAction extends AbstractController {

	@Override
	public void execute(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		// == 관리자(admin)로 로그인 했을 때만 조회가 가능하도록 해야 한다. == //
		HttpSession session = request.getSession();
		
		MemberVO loginuser = (MemberVO) session.getAttribute("loginuser");
		
		if( loginuser == null || !"admin".equals(loginuser.getUserid()) ) {
			// 로그인을 안한 경우 또는 일반사용자로 로그인 한 경우
			String message = "관리자만 접근이 가능합니다.";
			String loc = "javascript:history.back()";
			
			request.setAttribute("message", message);
			request.setAttribute("loc", loc);
			
		//	super.setRedirect(false);
			super.setViewPage("/WEB-INF/msg.jsp");
		}
		
		else {
			// 관리자(admin)로 로그인 했을 경우 
			// == 페이징 처리가 되어진 모든 회원 또는 검색한 회원 목록 보여주기 == //
			
			InterMemberDAO mdao = new MemberDAO();
			
			Map<String, String> paraMap = new HashMap<>();
			
			String currentShowPageNo = request.getParameter("currentShowPageNo");
			// currentShowPageNo 은 사용자가 보고자 하는 페이지바의 페이지번호 이다.
			// 메뉴에서 회원목록 만을 클릭했을 경우에는 currentShowPageNo 은 null 이 된다.
			// currentShowPageNo 이 null 이라면 currentShowPageNo 을 1 페이지로 바꾸어야 한다.
			
			String sizePerPage = request.getParameter("sizePerPage");
			// 한 페이지당 화면상에 보여줄 회원의 개수
			// 메뉴에서 회원목록 만을 클릭했을 경우에는 sizePerPage 는 null 이 된다.
			// sizePerPage 가 null 이라면 sizePerPage 를 10 으로 바꾸어야 한다.
			// "10" 또는 "5" 또는 "3" 
			
			if(currentShowPageNo == null) {
				currentShowPageNo = "1";
			}
			
			if(sizePerPage == null || 
			   !("3".equals(sizePerPage) || "5".equals(sizePerPage) || "10".equals(sizePerPage)) ) {
				sizePerPage = "10";
			}
			
			// === GET 방식이므로 사용자가 웹브라우저 주소창에서 currentShowPageNo 에 숫자가 아닌 문자를 입력한 경우 또는 
			//     int 범위를 초과한 숫자를 입력한 경우라면 currentShowPageNo 는 1 페이지로 만들도록 한다. ==== // 
			try {
				Integer.parseInt(currentShowPageNo);
			} catch(NumberFormatException e) {
				currentShowPageNo = "1";
			}
			
			
			paraMap.put("currentShowPageNo", currentShowPageNo);
			paraMap.put("sizePerPage", sizePerPage);
			
			List<MemberVO> memberList = mdao.selectPagingMember(paraMap);
			
			request.setAttribute("memberList", memberList);
			
			
			// **** ============ 페이지바 만들기 시작 ============ **** //
			/*
			    1개 블럭당 10개씩 잘라서 페이지 만든다.
			    
			    1개 페이지당 3개행 또는 5개행 또는 10개행을 보여주는데
			        만약에 1개 페이지당 5개행을 보여준다라면 
			        총 몇개 블럭이 나와야 할까? 
			        총 회원수가 207명 이고, 1개 페이지당 보여줄 회원수가 5 이라면
			    207/5 = 41.4 ==> 42(totalPage)        
			        
			    1블럭               1 2 3 4 5 6 7 8 9 10 [다음]
			    2블럭   [이전] 11 12 13 14 15 16 17 18 19 20 [다음]
			    3블럭   [이전] 21 22 23 24 25 26 27 28 29 30 [다음]
			    4블럭   [이전] 31 32 33 34 35 36 37 38 39 40 [다음]
			    5블럭   [이전] 41 42 
		    */
			
			// ==== !!! pageNo 구하는 공식 !!! ==== // 
			/*
			    1  2  3  4  5  6  7  8  9  10  -- 첫번째 블럭의 페이지번호 시작값(pageNo)은  1 이다.
			    11 12 13 14 15 16 17 18 19 20  -- 두번째 블럭의 페이지번호 시작값(pageNo)은 11 이다.	
			    21 22 23 24 25 26 27 28 29 30  -- 세번째 블럭의 페이지번호 시작값(pageNo)은 21 이다.
			    
			     currentShowPageNo        pageNo  ==> ( (currentShowPageNo - 1)/blockSize ) * blockSize + 1 
			    ---------------------------------------------------------------------------------------------
			           1                   1 = ( (1 - 1)/10 ) * 10 + 1 
			           2                   1 = ( (2 - 1)/10 ) * 10 + 1 
			           3                   1 = ( (3 - 1)/10 ) * 10 + 1 
			           4                   1 = ( (4 - 1)/10 ) * 10 + 1  
			           5                   1 = ( (5 - 1)/10 ) * 10 + 1 
			           6                   1 = ( (6 - 1)/10 ) * 10 + 1 
			           7                   1 = ( (7 - 1)/10 ) * 10 + 1 
			           8                   1 = ( (8 - 1)/10 ) * 10 + 1 
			           9                   1 = ( (9 - 1)/10 ) * 10 + 1 
			          10                   1 = ( (10 - 1)/10 ) * 10 + 1 
			           
			          11                  11 = ( (11 - 1)/10 ) * 10 + 1 
			          12                  11 = ( (12 - 1)/10 ) * 10 + 1
			          13                  11 = ( (13 - 1)/10 ) * 10 + 1
			          14                  11 = ( (14 - 1)/10 ) * 10 + 1
			          15                  11 = ( (15 - 1)/10 ) * 10 + 1
			          16                  11 = ( (16 - 1)/10 ) * 10 + 1
			          17                  11 = ( (17 - 1)/10 ) * 10 + 1
			          18                  11 = ( (18 - 1)/10 ) * 10 + 1 
			          19                  11 = ( (19 - 1)/10 ) * 10 + 1
			          20                  11 = ( (20 - 1)/10 ) * 10 + 1
			           
			          21                  21 = ( (21 - 1)/10 ) * 10 + 1 
			          22                  21 = ( (22 - 1)/10 ) * 10 + 1
			          23                  21 = ( (23 - 1)/10 ) * 10 + 1
			          24                  21 = ( (24 - 1)/10 ) * 10 + 1
			          25                  21 = ( (25 - 1)/10 ) * 10 + 1
			          26                  21 = ( (26 - 1)/10 ) * 10 + 1
			          27                  21 = ( (27 - 1)/10 ) * 10 + 1
			          28                  21 = ( (28 - 1)/10 ) * 10 + 1 
			          29                  21 = ( (29 - 1)/10 ) * 10 + 1
			          30                  21 = ( (30 - 1)/10 ) * 10 + 1			           

			 */
			
			String pageBar = "";
			
			int blockSize = 10;
			// blockSize 는 블럭(토막)당 보여지는 페이지 번호의 개수이다. 
			
			int loop = 1;
			// loop 는 1부터 증가하여 1개 블럭을 이루는 페이지번호의 개수(blockSize 지금은 10개) 까지만 증가하는 용도이다. 
			
			// !!!! 다음은 pageNo 를 구하는 공식이다. !!!! //
			int pageNo = ( ( Integer.parseInt(currentShowPageNo) - 1)/blockSize ) * blockSize + 1;
			// pageNo 는 페이지바에서 보여지는 첫번째 번호이다. 
			
			// 페이징 처리를 위한 검색이 있는 또는 검색이 없는 전체회원에 대한 총페이지 알아오기 
			int totalPage = mdao.getTotalPage(paraMap);
		//	System.out.println("~~~ 확인용 totalPage => " + totalPage);
			
			// === GET 방식이므로 사용자가 웹브라우저 주소창에서 currentShowPageNo 에 토탈페이지수 보다 큰 값을 입력하여 
			//     장난친 경우라면 currentShowPageNo 는 1 페이지로 만들도록 한다. ==== // 
			if( Integer.parseInt(currentShowPageNo) > totalPage ) {
				currentShowPageNo = "1";
			}
			
			// **** [맨처음][이전] 만들기 **** //
			if( pageNo != 1 ) {
				pageBar += "<li class='page-item'><a class='page-link' href='memberList.up?currentShowPageNo=1&sizePerPage="+sizePerPage+"'>[맨처음]</a></li>"; 
				pageBar += "<li class='page-item'><a class='page-link' href='memberList.up?currentShowPageNo="+(pageNo-1)+"&sizePerPage="+sizePerPage+"'>[이전]</a></li>";  
			}
						
			while( !(loop > blockSize || pageNo > totalPage) ) {
			
				if( pageNo == Integer.parseInt(currentShowPageNo) ) {
					pageBar += "<li class='page-item active'><a class='page-link' href='#'>"+pageNo+"</a></li>"; 
				}
				else {
					pageBar += "<li class='page-item'><a class='page-link' href='memberList.up?currentShowPageNo="+pageNo+"&sizePerPage="+sizePerPage+"'>"+pageNo+"</a></li>";   
				}
				
				loop++;
				pageNo++;
			}// end of while---------------------------------
			
			// **** [다음][마지막] 만들기 **** //
			// pageNo ==> 11
			if( pageNo <= totalPage ) {
				pageBar += "<li class='page-item'><a class='page-link' href='memberList.up?currentShowPageNo="+pageNo+"&sizePerPage="+sizePerPage+"'>[다음]</a></li>";  
				pageBar += "<li class='page-item'><a class='page-link' href='memberList.up?currentShowPageNo="+totalPage+"&sizePerPage="+sizePerPage+"'>[마지막]</a></li>"; 
			}
			
			request.setAttribute("pageBar", pageBar); 
			// **** ============ 페이지바 만들기 끝 ============ **** //
			
			
		//	super.setRedirect(false);
			super.setViewPage("/WEB-INF/member/memberList.jsp");
		}
		
	}
