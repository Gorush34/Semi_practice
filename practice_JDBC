package jdbc.day03.board;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		TotalController ctrl = new TotalController();
		Scanner sc = new Scanner(System.in);
		
		ctrl.menu_Start(sc);
		
		sc.close();
		System.out.println("~~~ 프로그램 종료 ~~~");

	} // end of main(String[] args)---------------------------

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package jdbc.day03.board;

import java.text.SimpleDateFormat;
import java.util.*;

import jdbc.util.MyUtil;

public class TotalController {

	
	// field, attribute, property, 속성
	InterMemberDAO mdao = new MemberDAO();
	InterBoardDAO bdao = new BoardDAO();
	
	// opration, method, 기능
	
	// *** 시작메뉴 메소드 생성하기 *** // 
	
	public void menu_Start(Scanner sc) {
		
		MemberDTO member = null;
		String s_Choice = "";
		
		
		
		do {
			String loginName = "";
			String login_logout = "로그인";
			// 안쪽에서 초기화하는 이유 : 로그인 로그아웃을 member의 null으로 판단하는데
			// 종료시 member는 null이 아니지만 로그인을 해야하기 때문에 반복문 안에서 초기화를 해줘야 한다.
			
			if(member != null) {
				loginName = "["+member.getName()+"(포인트 " +member.getPoint()+ ")" +"님 로그인중..]";
				login_logout ="로그아웃";
			}
		
			System.out.println("\n >>> ----- 시작메뉴 "+loginName+" ----- <<< \n"
					 + "1. 회원가입   2."+login_logout+"   3.프로그램종료 \n"
					 + "------------------------------------------\n");
	
			System.out.print("▷ 메뉴번호선택 : ");
			s_Choice = sc.nextLine();
			
			switch (s_Choice) {
			case "1": // 회원가입
				member = memberRegister(sc);
				break;
				
			case "2": 
				if("로그인".equals(login_logout)) {// 로그인 처리
					member = login(sc); 
					
					if(member != null) { // 로그인이 성공한 경우
						menu_Board(member, sc); // 게시판 메뉴에 들어간다.
					}
				}
				else { // 로그아웃 처리
					member = null;
					System.out.println(">> 로그아웃 되었습니다. << \n");
				}
				break;
				
			case "3": // 프로그램 종료
				
				
				break;
	
			default:
				System.out.println(">>> 메뉴에 없는 번호입니다. 다시 선택하세요!! <<< \n");
				break;
			} // end of switch--------------------------
		
		
		} while ( !( "3".equals(s_Choice) ) );

		
	} // end of public void menu_Start(Scanner sc)---------------


	// *** 회원가입하는 메소드 생성하기 *** // 
	private MemberDTO memberRegister(Scanner sc) {
		
		String userid = "";
		do {
			System.out.print(" 1. 아이디 : ");
			 userid = sc.nextLine();
			 boolean isUse = mdao.isUse_userid(userid);
			 
			if( !isUse ) {
				System.out.println("\n >> " + userid + " 아이디가 이미 사용중입니다. 다른 아이디를 입력하세요. << \n");
			}
			else {
				System.out.println("\n >> " + userid + " 아이디는 사용 가능한 아이디입니다. << \n");
				break;
			}
			
		} while (true);
		
		System.out.print(" 2. 비밀번호 : ");
		String passwd = sc.nextLine();
		System.out.print(" 3. 이름 : ");
		String name = sc.nextLine();
		System.out.print(" 4. 연락처 : ");
		String mobile = sc.nextLine();
		// 입력 받아서
		
		MemberDTO member = new MemberDTO();
		
		member.setUserid(userid);
		member.setPasswd(passwd);
		member.setName(name);
		member.setMobile(mobile);
		// DTO에 저장하고
		
		int n = mdao.memberRegister(member);
		// DAO에 보내서 결과값(0, 1)을 받아온다.
		
		if(n==1) {
			System.out.println("\n >> 회원가입 성공!! <<");
			// 위의 isUse_userid 메소드를 통해서 겹치지 않는 userid를 가지기 때문에 if가 필요없다.
			menu_Board(member, sc);
			
			return member; // 회원가입이 정상적으로 되어지면 멤버값을 return해준다.
		}
		else {
			return null; // 회원가입에 실패하면 null을 return 해준다.
		}
	
	}



	// *** 로그인 처리하는 메소드 생성하기 *** //
	private MemberDTO login(Scanner sc) {
		
		MemberDTO member = null;
		
		System.out.println("\n >>> --- 로그인 --- <<<");
		
		System.out.print("▷ 아이디 : ");
		String userid = sc.nextLine();
		
		System.out.print("▷ 비밀번호 : ");
		String passwd = sc.nextLine();
		
		// where map!!!! where map!!!! where map!!!! where map!!!! where map!!!!
		Map<String, String> paraMap = new HashMap<>();
		paraMap.put("userid", userid);
		paraMap.put("passwd", passwd);
		
		member = mdao.login(paraMap);
		
		if(member != null) {
			System.out.println(" >>> 로그인 성공!! <<< \n");
		}
		else {
			System.out.println(" >>> 로그인 실패!! <<< \n");
		}
		
		
		return member;
	} // end of private MemberDTO login(Scanner sc) -------------
	
	
	// *** 게시판 메뉴를 출력하는 메소드 생성하기 *** //
	private void menu_Board(MemberDTO member, Scanner sc) {
		
		String menuNo ="";
		
		String adminOnly_menu = ( "admin".equalsIgnoreCase(member.getUserid()) )?"10.모든회원정보보기":"";
		
		do {
			
			System.out.println("--------------------- 게시판 메뉴["+member.getName()+"(포인트 " +member.getPoint()+ ")" +"님 로그인중..] ---------------------\n"
							 + " 1.글목록보기     2.글내용보기     3.글쓰기     4.댓글쓰기 \n"
							 + " 5.글수정하기     6.글삭제하기     7. 최근 1주일간 일자별 게시글 작성건수 \n"
							 + " 8.저번달 및 이번달 일자별 게시글 작성건수   9.나가기    "+ adminOnly_menu +"\n"
							 + "---------------------------------------------------------------------");
			
			System.out.print("▷ 메뉴번호 선택 : ");
			menuNo = sc.nextLine();
			
			switch (menuNo) {
			case "1": // 글목록보기
				boardList();
				break;
				
			case "2": // 글내용보기
				viewContents(sc, member.getUserid()); // 2번째 파라미터는 조작 방지를 위해(내가 내 조회수 올리면 숀도 안풀고 닐로 먹을 수 있음)
				break;
				
			case "3": // 글쓰기
				write(sc, member);
				break;
				
			case "4": // 댓글쓰기 (jdbc_board 테이블에 insert + jdbc_member 테이블의 point 컬럼 update)
				write_comment(sc, member);
				break;				

			case "5": // 글수정하기
				int n = updateBoard(sc, member); // 수정할 번호, 내가쓸 글인지 아닌지 확인할 파라미터
				
				if( n==0 ) {
					System.out.println(">> [경고] 수정할 글번호 입력값은 숫자만 가능합니다. << \n");
				}
				else if( n==1 ) {
					System.out.println(">> [경고] 수정할 글번호는 존재하지 않는 글번호입니다. <<\n");
				}
				else if( n==2 ) {
					System.out.println(">> [경고] 다른 사용자의 글은 수정할 수 없습니다. <<\n");
				}
				else if( n==3 ) {
					System.out.println(">> [경고] 입력하신 글의 암호가 입력한 것과 일치하지 않습니다. <<\n");
				}
				else if( n==4 ) {
					System.out.println(">> 글 수정이 성공되었습니다. <<\n");
				}
				else if( n==5 ) {
					System.out.println(">> [장애발생] DB 에 장애가 발생하여 글 수정이 불가합니다. <<\n");
				}
				else if( n==6 ) {
					System.out.println(">> 글 수정을 취소하셨습니다. <<\\n");
				}
				
				
				break;		
				
			case "6": // 글삭제하기
				n = deleteBoard(sc, member); // 삭제할 번호, 내가쓸 글인지 아닌지 확인할 파라미터
				
				if( n==0 ) {
					System.out.println(">> [경고] 삭제할 글번호 입력값은 숫자만 가능합니다. << \n");
				}
				else if( n==1 ) {
					System.out.println(">> [경고] 삭제할 글번호는 존재하지 않는 글번호입니다. <<\n");
				}
				else if( n==2 ) {
					System.out.println(">> [경고] 다른 사용자의 글은 삭제할 수 없습니다. <<\n");
				}
				else if( n==3 ) {
					System.out.println(">> [경고] 입력하신 글의 암호가 입력한 것과 일치하지 않습니다. <<\n");
				}
				else if( n==4 ) {
					System.out.println(">> 글 삭제가 성공되었습니다. <<\n");
				}
				else if( n==5 ) {
					System.out.println(">> [장애발생] DB 에 장애가 발생하여 글 삭제가 불가합니다. <<\n");
				}
				else if( n==6 ) {
					System.out.println(">> 글 삭제를 취소하셨습니다. <<\\n");
				}
				
				
				break;
				
			case "7": // 최근 1주일간 일자별 게시글 작성건수
				statisticsByWeek();
				break;
				
			case "8": // 저번달 및 이번달 일자별 게시글 작성건수
				statisticsByPrevious_CurrentMonth();
				break;
				
			case "9": // 나가기
				
				break;
				
			case "10": // 모든회원정보보기(관리자전용)
				if( "admin".equals(member.getUserid()) ) {
					System.out.println("[1:회원명의 오름차순 / 2:회원명의 내림차순  / \n"
									 + "3:가입일자의 오름차순 / 4.가입일자의 내림차순 ");
					System.out.print("▷ 정렬선택 : ");
					String sortChoice = sc.nextLine();
					
					// 1, 2, 3, 4 를 제외한 나머지가 들어오면  1로 보겠다.
					if( !( "1".equals(sortChoice) || "2".equals(sortChoice) ||
						   "3".equals(sortChoice) || "4".equals(sortChoice) ) ) {
						sortChoice = "1";
					}
					
					selectAllMember(sortChoice); 	
					// 관리자를 제외한 모든 회원들을 선택한 정렬기준으로 보여주는 메소드 호출하기
				}
				
				else {
					System.out.println(">> 메뉴에 없는 번호입니다. << \n");
				}
				
				break;
				
			default:
				System.out.println(">> 메뉴에 없는 번호입니다. << \n");
				
				break;
			}
			
		} while( !("9".equals(menuNo) ) );
		
	} // end of private void menu_Board()----------------





	// *** 글목록보기 메소드 생성하기 *** //
	private void boardList() {
		
		List<BoardDTO> boardList = bdao.boardList();
		
		int boardCount = boardList.size();
		
		if( boardCount > 0 ) { // 게시글이 존재하는 경우
			
			System.out.println("\n-----------------------------[게시글 목록]------------------------------------");
			System.out.println("글번호\t글제목\t\t작성자\t작성일자\t\t\t조회수");
			System.out.println("---------------------------------------------------------------------------\n");
			
			StringBuilder sb = new StringBuilder();
			
			for( BoardDTO board : boardList ) {
				
				String subject = board.getSubject();
				if(subject.length() > 8 ) {
					subject = subject.substring(0, 8)+".."; // 처음시작, 8번째 앞까지 => 01234567
				}
				else if(subject.length() <= 8) { // 8보다 작으면 남은 자리에 공백을 채워줄 것임
					int cnt = 10 - subject.length(); 
					
					String blank = "";
					for(int i=0; i<cnt; i++) {
						blank += " ";
					} // end of for-----------------------
					
					subject += blank;
				}
				
				String commentcount = ( board.getCommentcnt() > 0 )?"[" + board.getCommentcnt() +"]":"";
				// 해당 원글에 딸린 댓글의 개수
				// "[" + board.getCommentcnt() +"]";
				
				sb.append(board.getBoardno() 	+ "\t" +						
						  subject 	+ commentcount + "\t" +
						  board.getMember().getName() + "\t" + 
						  // 우리가 BoardBTO에서 memberDTO를 선언한 후에 거기다 name을 집어넣고, 그 member를 board에다 넣어놨잖아요?
						  // 그것을 여기서 이중으로 꺼내는겁니다. 이와 같이 테이블에서 join을 하고 select 되어진 다른 테이블 값을 
						  // 이런 방식으로 꺼내먹을 수 있다.
						  board.getWriteday() 	+ "\t" +
						  board.getViewcount()	+ "  " + "\n"
						  );
				
			}
			
			System.out.println(sb.toString());
			
		}
		else {
			System.out.println("글이 없어요..");
		}
		
	} // end of private void boardList()----------------------------

	
	
	// *** 글 내용을 보여주는 메소드 생성하기 *** //
	private void viewContents(Scanner sc, String login_userid) {

		System.out.println("\n>>> 글내용 보기 <<<");
		
		System.out.print(" ▷ 글번호 : ");
		String boardno = sc.nextLine();
		
		Map<String, String> paraMap = new HashMap<>();
		paraMap.put("boardno", boardno);
		paraMap.put("fk_userid", login_userid);
		
		BoardDTO board = bdao.viewContents(paraMap);
		
		if(board != null) {
			// 존재하는 글번호를 입력한 경우 
			System.out.println(">> [글내용] <<");
			System.out.println("▷ 글번호 : " + board.getBoardno()	 + "\n"
							 + "▷ 작성자 : " + board.getMember().getName() + "\n"
					         + "▷ 글제목 : " + board.getSubject()	 + "\n"
					         + "▷ 글내용 : " + board.getContents() + "\n"
					         + "▷ 작성일자 : " + board.getWriteday() + "\n"
					         + "▷ 조회수 : " + board.getViewcount()	 + "\n");
		
		
		//////////////////////////////////////////////////////////////////////
		
		System.out.println(">> [댓글내용보기] <<");
		System.out.println("------------------------------------------------------------");
		
		List<BoardCommentDTO> commentList = bdao.commentList( boardno );
		
		if( commentList.size() > 0 ) { // 댓글 있을때
			
			System.out.println("댓글내용\t\t작성자\t작성일자");
			System.out.println("------------------------------------------------------------");
			
			StringBuilder sb = new StringBuilder();
			for( BoardCommentDTO comment : commentList ) {
				sb.append( comment.getContents() + "\t" + comment.getMember().getName() + "\t" + comment.getWriteday() + "\n" );	
			} // end of for-------------------
			
			System.out.println(sb.toString() + "\n");
			
		}
		else { // 댓글 없을떄
			System.out.println("=== 댓글내용 없음=== ");
		}
		
		
		}
		
	} // end of private void viewContents(Scanner sc, String userid)----------------------

	
	
	
	
	// *** 글쓰기 메소드 생성하기 *** //
	private void write(Scanner sc, MemberDTO member) {
	// 파라미터 member는 어차피 로그인 상태에서 글을 쓰기때문에 작성자에 대한 정보를 받아와야 하니까!!!
		System.out.println("\n>>> 글쓰기 <<<");
		
		System.out.println("1. 작성자명 : " + member.getName());
		
		System.out.print("2. 글제목 : ");
		String subject = sc.nextLine();
		
		System.out.print("3. 글내용 : ");
		String contents = sc.nextLine();
		
		System.out.print("4. 글암호 : ");
		String boardpasswd = sc.nextLine();
		
		String yn = "";
		
		do {
			System.out.print(">> 정말로 글쓰기를 하시겠습니까?[Y/N] : ");
			 yn = sc.nextLine();
			
			if( "y".equalsIgnoreCase(yn) || "n".equalsIgnoreCase(yn) ) {
				break;
			}
			else {
				System.out.println(">> [경고] Y 또는 N 만 입력하세요!! << \n" );
			}
			
		} while(true);
		
		if( "n".equalsIgnoreCase(yn) ) {
			System.out.println(">> 글쓰기를 취소하셨습니다. << \n");
		}
		else {
			// 사용자가 "y"를 입력한 경우
			BoardDTO board = new BoardDTO();
			board.setFk_userid(member.getUserid());
			board.setSubject(subject);
			board.setContents(contents);
			board.setBoardPasswd(boardpasswd);
			
			int n = bdao.write(board);
			// 글쓰기에 성공했으면 n 값이 1 일 것이고 아니면 0 일 것이다.
			
			if(n==1) {
				System.out.println(">> 글쓰기가 성공적으로 완료되었습니다. << \n ");
				member.setPoint(member.getPoint() +10);
			
			}
			else {
				System.out.println(">> 장애가 발생되어 글쓰기가 실패하였습니다. << \n");
				System.out.println(n);
			}
		}
		
	} // end of private void write(Scanner sc, String userid)
	
	
	
	// *** 댓글쓰기 메소드 생성하기 *** //
		private void write_comment(Scanner sc, MemberDTO member) {
			
			System.out.println("\n >>> 댓글쓰기 <<<");
			
			System.out.println("1. 작성자명 : " + member.getName() );
			
			String fk_boardno = "";
			do {
				System.out.print("2. 원글의 글번호 : ");
				fk_boardno = sc.nextLine(); // 존재하는 원글번호를 입력하는 경우
												// 존재하지 않는 원글번호를 입력하는 경우
												// ㅠㅁㄴㅇㅇㅁㄴ asfasfs 와 같이 장난치는 경우
				try {
					Integer.parseInt(fk_boardno);
					break;
				} catch(NumberFormatException e) {
					System.out.println(">>[경고] 원글의 글번호는 정수로만 입력하세요!! <<");
				}	
				
			} while(true);  // end of do~while-----------------------------
			
			String contents = "";
			
			do {
				System.out.print("3. 댓글내용 : "); // "안녕하세요" 와 같이 잘 입력해주는 경우
												  // "    " 와 같이 공백만 입력해주는 경우
												  // 그냥 엔터만 치는 경우
				 contents = sc.nextLine();
				
				if(contents.trim().isEmpty()) {
					// "	" 와 같이 공백만 입력해주는 경우
					// 그냥 엔터만 하는 경우
					System.out.println(">> [경고] 댓글내용은 공백만으로는 안됩니다. <<");
				}
				else {
					break;
				}
			} while(true);
			
			BoardCommentDTO comment = new BoardCommentDTO();
			comment.setFk_boardno(fk_boardno);	// 원글의 글번호
			comment.setFk_userid(member.getUserid()); // 댓글을 작성하고자 하는 사용자(현재 로그인 중인 사용자)의 userid
			comment.setContents(contents); // 댓글내용
			
			int n = bdao.write_comment(comment);
			
			if(n==1) { // 댓글쓰기가 성공한 경우
				System.out.println(">> 댓글쓰기 성공!! << \n");
				// 포인트는 DB에서 추가됐는데, 메뉴창의 포인트는 갱신이 안됨. 우짤까?
				member.setPoint( member.getPoint() +5 );
				// 우짜긴 여기서도 5포인트 추가해야 서로 일치하지!
			}
			else if(n == -1) {  // 사용자가 댓글을 작성시 존재하지 않는 원글번호를 입력한 경우
				System.out.println(">> 올바른 원글번호를 입력하세요!! << \n");
			}
			else { // n == 0 (기타 장애가 발생한 경우)
				System.out.println(">> [장애발생] DB의 장애로 인한 댓글쓰기 실패.  << \n");
			}
			
			
			
		} // end of private void write_comment(Scanner sc, MemberDTO member)--------------
	
		
		
		// *** 글 수정하기 ***
		private int updateBoard(Scanner sc, MemberDTO member) {
			
			int n = 0;
			
			System.out.println("\n>>> 글 수정하기 <<<");
			
			System.out.print("▷ 수정할 글번호 : ");
			String boardno = sc.nextLine();
			
			try {
				Integer.parseInt(boardno); // 입력받은 값이 숫자인지 확인하기 위해 int타입으로 형변환해서 알아본다.
				
				System.out.print("▷ 수정할 글의 글제목 : ");
				String subject = sc.nextLine();
				
				System.out.print("▷ 수정할 글내용 : ");
				String contents = sc.nextLine();
				
				System.out.print("▷ 수정할 글의 글암호 : ");
				String boardpasswd = sc.nextLine();
				
				do {
					System.out.print(">> 정말로 글을 수정하시겠습니까? [Y/N] : ");
					String yn = sc.nextLine();
					
					if("n".equalsIgnoreCase(yn)) { // n ==> 6이면 글 수정을 취소한 경우
						n = 6;
						break;
					}
					else if("Y".equalsIgnoreCase(yn)){
						
						Map<String, String> paraMap = new HashMap<>();
						paraMap.put("BOARDNO", boardno);
						paraMap.put("SUBJECT", subject);
						paraMap.put("CONTENTS", contents);
						paraMap.put("BOARDPASSWD", boardpasswd);
						paraMap.put("USERID", member.getUserid());
						
						n = bdao.updateBoard(paraMap); // 맵에 값을 넣어준 후에 BoardDAO에서 판별
						/*
						 n ==> 0이면 숫자가 아닌 다른 것을 입력함 (밑에 catch에서 확인 가능)
						 n ==> 1이면 수정할 글번호가 없음 (bdao에서 확인 가능)
						 n ==> 2이면 작성된 글의 작성자가 본인이 아닌 경우
						 n ==> 3이면 작성글의 암호가 일치하지 않는 경우
						 n ==> 4면 글 수정이 성공한 경우
						 n ==> 5면 sql 문이 잘못된 경우
						 n ==> 6이면 글 수정을 취소한 경우
					 	*/	
						
						break;
					}
					else {
						System.out.println(">> [경고] Y 또는 N 만 입력하세요!! << \n");
					}
				} while(true); // end of do~while;----------------------------------
				
				
			} catch(NumberFormatException e) {
				// str_boardno 값이 숫자로 변환될 수 없는 경우
				n = 0;
			}
				
	
			
			return n;
		} // end of private int updateBoard(Scanner sc, MemberDTO member)---------------------------------
		
		
		
		
		
		
		
		

		// *** 글 삭제하기 ***
		private int deleteBoard(Scanner sc, MemberDTO member) {
			
			int n = 0;
			
			System.out.println("\n>>> 글 삭제하기 <<<");
			
			System.out.print("▷ 삭제할 글번호 : ");
			String boardno = sc.nextLine();
			
			try {
				Integer.parseInt(boardno); // 입력받은 값이 숫자인지 확인하기 위해 int타입으로 형변환해서 알아본다.
				
				System.out.print("▷ 삭제할 글의 글암호 : ");
				String boardpasswd = sc.nextLine();
				
				do {
					System.out.print(">> 정말로 글을 삭제하시겠습니까? [Y/N] : ");
					String yn = sc.nextLine();
					
					if("n".equalsIgnoreCase(yn)) { // n ==> 6이면 글 삭제를 취소한 경우
						n = 6;
						break;
					}
					else if("Y".equalsIgnoreCase(yn)){
						
						Map<String, String> paraMap = new HashMap<>();
						paraMap.put("BOARDNO", boardno);
						paraMap.put("BOARDPASSWD", boardpasswd);
						paraMap.put("USERID", member.getUserid());
						
						n = bdao.deleteBoard(paraMap); // 맵에 값을 넣어준 후에 BoardDAO에서 판별
						/*
						 n ==> 0이면 숫자가 아닌 다른 것을 입력함 (밑에 catch에서 확인 가능)
						 n ==> 1이면 삭제할 글번호가 없음 (bdao에서 확인 가능)
						 n ==> 2이면 작성된 글의 작성자가 본인이 아닌 경우
						 n ==> 3이면 작성글의 암호가 일치하지 않는 경우
						 n ==> 4면 글 삭제가 성공한 경우
						 n ==> 5면 sql 문이 잘못된 경우
						 n ==> 6이면 글 삭제를 취소한 경우
					 	*/	
						
						break;
					}
					else {
						System.out.println(">> [경고] Y 또는 N 만 입력하세요!! << \n");
					}
				} while(true); // end of do~while;----------------------------------
				
				
			} catch(NumberFormatException e) {
				// str_boardno 값이 숫자로 변환될 수 없는 경우
				n = 0;
			}
				
	
			
			return n;
		} // end of private int deleteBoard(Scanner sc, MemberDTO member)---------------------------------
		
	
	
	
	
	
		

	// **** 최근 1주일간 일자별 게시글 작성건수 ****
	private void statisticsByWeek() {
		
		System.out.println("\n------------------------------------[최근 1주일간 일자별 게시글 작성건수]------------------------------------");
		
		String title = "전체\t";
		
		// 만약 오늘이 2022-02-03 이라면
		// 			전체 2022-01-28 2022-01-29 2022-01-30 2022-01-31 2022-02-01 2022-02-02 2022-02-03
		// 이렇게 나타내고 싶다.
		for(int i=0; i<7; i++) {
			title += MyUtil.addDay(i-6) + "    "; // -6  -5  -4  -3  -2  -1  0 을 해야하기 때문에
		} // end of for------------------------
		
		System.out.println(title);
		//			전체 2022-01-28 2022-01-29 2022-01-30 2022-01-31 2022-02-01 2022-02-02 2022-02-03
		System.out.println("----------------------------------------------------------------------------------------------------------");
		
		Map<String, Integer> resultMap = bdao.statisticsByWeek(); // 최근 1주일간 일자별 게시글 작성건수를 select 해서 나오는 결과물  
		// DTO는 일반적으로 select 및 insert를 할 수 있지만 이번에는 select만 해오기 때문에 select만 해올떄는 Map을 쓴다!!!!!*****
		
		String result = resultMap.get("TOTAL") + "\t" + 
						resultMap.get("PREVIOUS6") + "\t" +
						resultMap.get("PREVIOUS5") + "\t" +
						resultMap.get("PREVIOUS4") + "\t" +
						resultMap.get("PREVIOUS3") + "\t" +
						resultMap.get("PREVIOUS2") + "\t" +
						resultMap.get("PREVIOUS1") + "\t" +
						resultMap.get("TODAY");
		
		System.out.println(result);
		System.out.println("");
		
		
	}	// end of private void statisticsByWeek()------------------------------
		
	
	
	
	
	
	
	
	// *** 전월일 당월 일자별 게시글 작성건수 ***
	private void statisticsByPrevious_CurrentMonth() {
		
		Calendar currentDate = Calendar.getInstance(); 
		   // 현재날짜와 시간을 얻어온다.
		
		currentDate.add(Calendar.MONTH, -1); 
		
		SimpleDateFormat sdateFmt = new SimpleDateFormat("yyyy년 MM월");
		String previous_1_month = sdateFmt.format(currentDate.getTime());
		
		currentDate = Calendar.getInstance(); 
		   // 현재날짜와 시간을 얻어온다.
		String current_month = sdateFmt.format(currentDate.getTime());
		
		
		System.out.println("\n>>>> [ "+previous_1_month+" , "+current_month+" 일자별 게시글 작성건수] <<<<");
		// System.out.println("\n---- [ 2022년 01월, 2022년 02월 일자별 게시글 작성건수] ----");
		
		System.out.println("----------------------------------");
		System.out.println(" 작성일자\t작성건수");
		System.out.println("----------------------------------");
		
		List<Map<String, String>> mapList = bdao.statisticsByPrevious_CurrentMonth();
		
		// 알맹이가 있나없나 알아보자
		if( mapList.size() > 0 ) {
		
			StringBuilder sb = new StringBuilder();
			
			for(Map<String, String> map : mapList) {
				sb.append( map.get("WRITEDAY") + "\t" + map.get("CNT") + "\n" );
			} // end of for-------------------------
			
			System.out.println(sb.toString());
			
		}
		else {
			System.out.println(" 작성된 게시글이 없습니다.");
		}
		
	} // end of statisticsByPrevious_CurrentMonth	
		
	
	
	
	
	
		
	// 관리자를 제외한 모든 회원들을 선택한 정렬기준으로 보여주는 메소드 생성하기 *** // 
	private void selectAllMember(String sortChoice) {
		
		System.out.println("\n>>> ================ 모든 회원정보 ================ <<<");
		System.out.println("----------------------------------------------------------------------");
		System.out.println("회원번호    아이디    성명   연락처   포인트     가입일자       	   탈퇴유무");
		System.out.println("----------------------------------------------------------------------");
		
		List<MemberDTO> memberList =  mdao.selectAllMember(sortChoice);
		// MemberDTO 만들어있는 List memberList에 넣어준다.
		
		int memberCount = memberList.size(); // admin 을 제외한 회원 수 ==> 회원정보가 1묶음으로 기록될 때마다 ++ 되니까.
		
		if(memberCount > 0) {
			
			StringBuilder sb = new StringBuilder();
			
			for( MemberDTO mbr : memberList) {
				
				String str_status = ( mbr.getStatus() == 1 )?"가입중":"탈퇴함";
				
				sb.append( mbr.getUserseq() 	+ "   " +
						   mbr.getUserid()  	+ "   " +
						   mbr.getName()    	+ "   " +
						   mbr.getMobile()  	+ "   " +
						   mbr.getPoint()   	+ "   " +
						   mbr.getRegisterday() + "   " +
						   str_status + "\n" );
				
			} // end of for----------------------------
			
			System.out.println(sb.toString());
		}
		else {
			System.out.println("가입된 회원이 없습니다.");
		}
		
		
		

		
		
	} // end of private void selectAllMember(String sortChoice)
	
	
}
